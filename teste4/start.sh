#!/bin/bash

# Script para iniciar o DashboardNext v2.0 - Teste 4

echo "üöÄ Iniciando DashboardNext v2.0 - Teste 4..."

# Verifica se o Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker n√£o est√° rodando. Por favor, inicie o Docker primeiro."
    exit 1
fi

# Criar arquivos .env se n√£o existirem
if [ ! -f "./backend/.env" ]; then
    echo "üìù Criando arquivo .env para backend..."
    cp ./backend/.env.example ./backend/.env
    echo "‚ö†Ô∏è  Por favor, edite ./backend/.env com suas configura√ß√µes (especialmente TINY_API_TOKEN)"
fi

if [ ! -f "./frontend/.env" ]; then
    echo "üìù Criando arquivo .env para frontend..."
    cp ./frontend/.env.example ./frontend/.env
fi

# Para containers antigos se existirem
echo "üõë Parando containers antigos..."
docker-compose down

# Remove volumes antigos para limpar cache (opcional)
# echo "üßπ Limpando volumes antigos..."
# docker-compose down -v

# Constr√≥i as imagens
echo "üèóÔ∏è  Construindo imagens Docker..."
docker-compose build

# Inicia os servi√ßos
echo "‚ñ∂Ô∏è  Iniciando servi√ßos..."
docker-compose up -d

# Aguarda os servi√ßos iniciarem
echo "‚è≥ Aguardando servi√ßos iniciarem..."
sleep 15

# Verifica status dos containers
echo "üìä Status dos containers:"
docker-compose ps

# Verifica health do backend
echo ""
echo "üè• Verificando sa√∫de dos servi√ßos..."
curl -s http://localhost:8000/api/v1/health > /dev/null 2>&1
if [ $? -eq 0 ]; then
    echo "‚úÖ Backend est√° saud√°vel"
    # Mostra detalhes do health check
    curl -s http://localhost:8000/api/v1/health | python -m json.tool 2>/dev/null || echo "   (Detalhes n√£o dispon√≠veis)"
else
    echo "‚ùå Backend n√£o est√° respondendo"
    echo "   Verifique os logs: docker-compose logs backend"
fi

echo ""
echo "‚úÖ DashboardNext v2.0 - Teste 4 iniciado!"
echo ""
echo "üåê Acesse:"
echo "   - Frontend: http://localhost:3000"
echo "   - Backend API: http://localhost:8000"
echo "   - API Docs: http://localhost:8000/api/v1/docs"
echo "   - ReDoc: http://localhost:8000/api/v1/redoc"
echo "   - Flower (Celery): http://localhost:5555"
echo ""
echo "üìå Comandos √∫teis:"
echo "   - Ver todos os logs: docker-compose logs -f"
echo "   - Ver logs espec√≠ficos: docker-compose logs -f [backend|frontend|redis|postgres|celery|flower]"
echo "   - Parar tudo: docker-compose down"
echo "   - Reiniciar servi√ßo: docker-compose restart [servi√ßo]"
echo "   - Executar testes backend: docker-compose exec backend pytest"
echo ""